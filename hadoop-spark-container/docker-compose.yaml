version: "3"

services:
  namenode:
    build:
      context: ./namenode
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
      - spark-hadoop-network


  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      - spark-hadoop-network
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env
    networks:
      - spark-hadoop-network

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
      - spark-hadoop-network
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    networks:
      - spark-hadoop-network

  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    restart: always
    ports:
      - '8080:8080'
      - '7077:7077'
    volumes:
      - ../scripts/spark/load_comments_to_hdfs.py:/scripts/load_comments_to_hdfs.py
      - ../scripts/spark/read_partial_df.py:/scripts/read_partial_df.py
      - ../scripts/spark/utils/html_utils.py:/scripts/utils/html_utils.py
      - ../data/comments.csv:/data/comments.csv
      - data_volume:/mnt/data
    environment:
      - SPARK_MODE=master
    depends_on:
      - namenode
      - datanode
    networks:
      - spark-hadoop-network

  spark-worker:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker
    restart: always
    volumes:
      - ../scripts/spark/load_comments_to_hdfs.py:/scripts/load_comments_to_hdfs.py
      - ../scripts/spark/read_partial_df.py:/scripts/read_partial_df.py
      - ../scripts/spark/utils/html_utils.py:/scripts/utils/html_utils.py
      - ../data/comments.csv:/data/comments.csv
      - data_volume:/mnt/data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    networks:
      - spark-hadoop-network

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - spark-hadoop-network

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.27.1.16
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - spark-hadoop-network

  streamsets:
    image: streamsets/datacollector:3.13.0-latest
    container_name: streamsets
    ports:
      - "18630:18630"
    networks:
      - spark-hadoop-network
  
  nginx:
    build:
      context: ./nginx
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/materialize.min.css:/usr/share/nginx/css/materialize.min.css
      - ./nginx/default-styles.css:/usr/share/nginx/css/default-styles.css
      - data_volume:/usr/share/nginx/html/data

    depends_on:
      - namenode
      - spark-master
    networks:
      - spark-hadoop-network
  
volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
  data_volume:

networks:
  spark-hadoop-network:
    driver: bridge