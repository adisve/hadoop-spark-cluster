version: "3"

services:
  namenode:
    build:
      context: ./namenode
      args:
        HADOOP_ARCHITECTURE: ${HADOOP_ARCHITECTURE}
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    networks:
      - default

  datanode:
    build:
      context: ./datanode
      args:
        HADOOP_ARCHITECTURE: ${HADOOP_ARCHITECTURE}
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    networks:
      - default
  
  resourcemanager:
    build:
      context: ./resourcemanager
      args:
        HADOOP_ARCHITECTURE: ${HADOOP_ARCHITECTURE}
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env
    networks:
      - default

  nodemanager:
    build:
      context: ./nodemanager
      args:
        HADOOP_ARCHITECTURE: ${HADOOP_ARCHITECTURE}
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
      - default
  
  historyserver:
    build:
      context: ./historyserver
      args:
        HADOOP_ARCHITECTURE: ${HADOOP_ARCHITECTURE}
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    networks:
      - default

  spark-master:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-master
    restart: always
    ports:
      - '8080:8080'
      - '7077:7077'
    volumes:
      - ../scripts/spark/setup/load_data_to_hdfs.py:/scripts/load_data_to_hdfs.py
      - ../scripts/spark/config/config.json:/scripts/config/config.json
      - ../scripts/spark/config/schema.json:/scripts/config/schema.json
      - ../data/output.csv:/data/output.csv
    environment:
      - SPARK_MODE=master
    depends_on:
      - namenode
      - datanode
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  spark-worker:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-worker
    restart: always
    volumes:
      - ../scripts/spark/setup/load_data_to_hdfs.py:/scripts/load_data_to_hdfs.py
      - ../scripts/spark/config/config.json:/scripts/config/config.json
      - ../scripts/spark/config/schema.json:/scripts/config/schema.json
      - ../data/output.csv:/data/output.csv
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    networks:
      - default
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
  
volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:

networks:
  default:
    name: shared-spark-hadoop-network
    external: true